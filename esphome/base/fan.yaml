###
##
# Controlling the WTW fan

##
# These are the numbers for the fan:
# 2010: Demand ventilation: Going to the building - Intake
# 2011: Demand ventilation: Turn on / off
# 2012: Demand ventilation: Going to outfide - Exhaust
# 2013: Demand ventilation: Turn on / off
# 2020: Volume flow: intake fan
# 2021: Volume flow: intake fan: Turn on / off
# 2022: Volume flow: exhaust fan
# 2023: Volume flow: exhaust fan: Turn on / off

number:
  - name: ${f_2010} 
    platform: modbus_controller
    modbus_controller_id: ${modbus_id}
    id: fan_demand_value
    icon: mdi:home-import-outline
    address: 2010
    unit_of_measurement: "m3/h"
    min_value: 0
    max_value: ${max.cap}
    step: 1
    value_type: U_WORD
    use_write_multiple: true
    on_value_range:
      - above: 2.0
        then: 
          - switch.turn_on: fan_demand_on_off
      - below: 1.0
        then:
          - switch.turn_off: fan_demand_on_off

  # - name: ${f_2012}
  #   address: 2012
  #   id: fan_exhaust_demand_value
  #   unit_of_measurement: m3/h
  #   min_value: 0
  #   max_value: ${max.cap}
  #   step: 1
  #   platform: modbus_controller
  #   modbus_controller_id: ${modbus_id}
  #   icon: mdi:home-export-outline
  #   use_write_multiple: true
  #   on_value_range:
  #     - above: 2.0
  #       then: 
  #         - number.set:
  #             id: fan_flow_exhaust_on_off
  #             value: 1.0
  #     - below: 1.0
  #       then:
  #         - number.set:
  #             id: fan_flow_exhaust_on_off
  #             value: 0.0
  # - name: ${f_2013}
  #   id: fan_flow_exhaust_on_off
  #   address: 2013
  #   min_value: 0
  #   max_value: 1
  #   step: 1
  #   platform: modbus_controller
  #   modbus_controller_id: ${modbus_id}
  #   use_write_multiple: true
  #   icon: mdi:toggle-switch-variant
  - name: ${f_2020}
    platform: modbus_controller
    modbus_controller_id: ${modbus_id}
    id: fan_flow_ingress_value
    icon: mdi:home-import-outline
    unit_of_measurement: "m3/h"
    address: 2020
    min_value: 0
    max_value: ${max.cap}
    step: 1
    value_type: U_WORD
    use_write_multiple: true
    on_value_range:
      - above: 2.0
        then: 
          - switch.turn_on: fan_flow_ingress_on_off
      - below: 1.0
        then:
          - switch.turn_off: fan_flow_ingress_on_off


###
# Create a fan entity in HA.
fan:
  - platform: speed
    id: wtw_fan
    name: "WTW - Fan"
    output: fanoutput
    # Create 7 speed van from 100 to 399 in 50 increments
    speed_count: 7 
    restore_mode: RESTORE_DEFAULT_OFF

###
# Output of the fan.
output:
  - platform: template
    id: fanoutput
    type: float
    # Wish it was a shorter lambda but here we are it works
    write_action:
      - if:
          condition:
            lambda: return (id(wtw_fan).state);
          then:
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 1);
                then:
                  - logger.log: "fan_output_value: 1"
                  - switch.turn_on: fan_demand_on_off
                  - number.set:
                      id: fan_demand_value
                      value: ${fan.speed_1}
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 2);
                then:
                  - logger.log: "fan_output_value: 2"
                  - switch.turn_on: fan_demand_on_off
                  - number.set:
                      id: fan_demand_value
                      value: ${fan.speed_2}
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 3);
                then:
                  - logger.log: "fan_output_value: 3"
                  - switch.turn_on: fan_demand_on_off
                  - number.set:
                      id: fan_demand_value
                      value: ${fan.speed_3}
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 4);
                then:
                  - logger.log: "fan_output_value: 4"
                  - switch.turn_on: fan_demand_on_off
                  - number.set:
                      id: fan_demand_value
                      value: ${fan.speed_4}
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 5);
                then:
                  - logger.log: "fan_output_value: 5"
                  - switch.turn_on: fan_demand_on_off
                  - number.set:
                      id: fan_demand_value
                      value: ${fan.speed_5}
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 6);
                then:
                  - logger.log: "fan_output_value: 6"
                  - switch.turn_on: fan_demand_on_off
                  - number.set:
                      id: fan_demand_value
                      value: ${fan.speed_6}
            - if:
                condition:
                  lambda: return (id(wtw_fan).speed == 7);
                then:
                  - logger.log: "fan_output_value: 7"
                  - switch.turn_on: fan_demand_on_off
                  - number.set:
                      id: fan_demand_value
                      value: ${fan.speed_7}
      - if:
          condition:
            lambda: return !(id(wtw_fan).state);
          then:
            - logger.log: "fan_output_value: Back to auto"
            - switch.turn_off: fan_demand_on_off

switch:
  - name: ${f_2021}
    platform: modbus_controller
    modbus_controller_id: ${modbus_id}
    id: fan_flow_ingress_on_off
    address: 2021
    register_type: holding
    use_write_multiple: true
    icon: mdi:toggle-switch-variant

  - name: ${f_2011}
    platform: modbus_controller
    modbus_controller_id: ${modbus_id}
    id: fan_demand_on_off
    address: 2011
    use_write_multiple: true
    register_type: holding
    icon: mdi:toggle-switch-variant 
